<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on λ Cosme Zamudio</title>
    <link>/tags/stack/</link>
    <description>Recent content in Stack on λ Cosme Zamudio</description>
    <generator>Hugo</generator>
    <language>es-MX</language>
    <lastBuildDate>Mon, 23 Sep 2024 22:25:38 -0700</lastBuildDate>
    <atom:link href="/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>El Stack</title>
      <link>/blog/stack/</link>
      <pubDate>Mon, 23 Sep 2024 22:25:38 -0700</pubDate>
      <guid>/blog/stack/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Este artículo surgió gracias a mis experimentos con &lt;a href=&#34;https://github.com/cosmez/stack_machine&#34;&gt;stack machines&lt;/a&gt; en C#.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Mejorar el rendimiento y el consumo de memoria es una de las tendencias que vemos en las nuevas versiones de C# (y .NET en general). Desde C# 7.0 se han introducido versiones &amp;ldquo;Value&amp;rdquo; de algunas APIs, como por ejemplo:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Task&lt;/code&gt; y &lt;code&gt;ValueTask&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Tuple&lt;/code&gt; y &lt;code&gt;ValueTuple&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt; y &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Estos nuevos tipos son de valor y no de referencia, como si representaran un significado especial para el programador.  Se explica que un tipo por referencia como &lt;code&gt;Tuple&lt;/code&gt;  se guarda en el Heap (Memoria), y un tipo por valor como &lt;code&gt;ValueTuple&lt;/code&gt; se guarda en el Call Stack, ¿Pero qué ventajas tiene el Stack sobre el Heap ?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
